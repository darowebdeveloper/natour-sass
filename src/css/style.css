/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
/*-------------------------------------------*\
  Reset CSS
\*-------------------------------------------*/
*,
*::after,
a::before {
  margin: 0;
  padding: 0;
  /* element will inherit box-sizing from body element */
  box-sizing: inherit;
}
html {
  /* 
    Set the root font-size to 10px for easy calutation 
    default is 16px; we want 10px
    So, we 10 / 16 = 0.625 * 100 = 62.5%
  */
  font-size: 62.5%;
}
body {
  /* set font properties for inheritance since body is the parent of all html elements */
  font-family: Futura, Verdana, Geneva, Tahoma, sans-serif;
  font-weight: normal;
  line-height: 1.7;
  color: #777;
  /* Below is not inherited; above is inherited */
  padding: 3rem;
  /* 
    Padding and border not added to content width
    Best practice for box-sizing using inherit
    this will help other plugins to set diff
    box-sizing
  */
  box-sizing: border-box;
}
/*-------------------------------------------*\
  Header
\*-------------------------------------------*/
.header {
  /* vh == viewport */
  height: 95vh;
  background: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      hsla(160, 64%, 43%, 0.8)
    ),
    url(../img/hero.jpg) no-repeat top;
  /* To cover the container */
  background-size: cover;
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /* position relative for child reference */
  position: relative;
}
.header__logo-box {
  position: absolute;
  left: 4rem;
  top: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* 
    Fix shaking of child elements that are animated 
    But it also hide the back face if element rotated
  */
  backface-visibility: hidden;
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  letter-spacing: 3.5rem;
  animation-name: moveInFromLeft;
  animation-duration: 1s;
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: lighter;
  letter-spacing: 1.92rem;
  animation-name: moveInFromRight;
  animation-duration: 1s;
}
@keyframes moveInFromLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    opacity: 0.8;
    transform: translateX(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes moveInFromRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    opacity: 0.8;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes moveInFromBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
/* psuedo class => special state of element */
.btn:link,
.btn:visited {
  font-size: 1.6rem;
  text-decoration: none;
  text-transform: uppercase;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 5rem;
  transition: all 0.2s;
  /* position for reference */
  position: relative;
}
/* psuedo class */
.btn:hover {
  transform: translateY(-3px);
  /* box-shadow: x y blue color */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}
.btn:active {
  transform: translateY(-1px);
  /* box-shadow: x y blue color */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5);
}
.btn--white {
  background: #fff;
  color: #777;
}
/* psuedo element */
.btn::after {
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 5rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}
.btn--white::after {
  background: #fff;
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn--animated {
  animation: moveInFromBottom 1s ease-in 0.75s;
  /* apply the styles of animation at 0% before animation starts*/
  animation-fill-mode: backwards;
}
/*-------------------------------------------*\
  Three pillars for HTML and CSS
  - Responsive design
    - responsive images
    - correct units
    - mobile-first or desktop first
  - Maintainable and scalable code
    - clean; easy to understand
    - groth
    - reusable
  - Web performance
    - faster and smaller in size
    - less HTTP requests
    - compress code
    - use pre-processor
    - reduce the use of and compress images
\*-------------------------------------------*/

/*-------------------------------------------*\
  CSS Architecture
  - BEM
    - Block .block{}
      - meaningful on its own
    - Element .block__element{}
      - part of a block but no standalone meaning
    - Modifier .block__element--modifier{} || .block--modifier
      - a different version of a block or an element
  - 7-1 Pattern Achitecture Folders -- Not always to use all the folders depending on project size
    - base/
    - components/
    - layout/
    - pages/
    - themes/ 
    - abstracts/ (no outputs)
    - vendors/ 
\*-------------------------------------------*/
